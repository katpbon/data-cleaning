/* Cleaning Data in SQL Queries */
--1. Standardize Date Format
--2. Populate Property Address Data
--3. Break out Address into Individual Columns (Address, City, State)
--4. Change Y and N to Yes and No in "Sold as Vacant" field
--5. Remove Duplicates
--6. Delete Unused Columns

--1. Standardize Date Format
ALTER TABLE dbo.NashvilleHousing
ADD SaleDateOnly date; --add new column for date only

UPDATE dbo.NashvilleHousing
SET SaleDateOnly = CAST(SaleDate AS date); --update the table to show new column as date, not datetime

--2. Populate Property Address Data
--There are duplicate ParcelIDs. One of the duplicates has the address; the other doesn't. We want to populate the NULL value with the address using the Parcel ID.
SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, ISNULL(a.PropertyAddress, b.PropertyAddress) --this tells SQL how to populate the NULL property address
FROM dbo.NashvilleHousing a
JOIN dbo.NashvilleHousing b--self join
	ON a.ParcelID = b.ParcelID
	AND a.UniqueID <> b.UniqueID --join table to itself where ParcelID is the same, but Unique ID is different
WHERE a.PropertyAddress is NULL;

UPDATE a
SET PropertyAddress = ISNULL(a.PropertyAddress, b.PropertyAddress)
FROM dbo.NashvilleHousing a
JOIN dbo.NashvilleHousing b
	ON a.ParcelID = b.ParcelID
	AND a.UniqueID <> b.UniqueID
WHERE a.PropertyAddress is NULL;

/*SELECT *
FROM dbo.NashvilleHousing
WHERE PropertyAddress is NULL; --verifying that the NULL property addresses were populated */

--3. Break out Address into Individual Columns (Address, City, State)
ALTER TABLE dbo.NashvilleHousing
ADD PropertyStreet varchar(255);

UPDATE dbo.NashvilleHousing
SET PropertyStreet = REVERSE(PARSENAME(REPLACE(REVERSE(TRIM(PropertyAddress)), ',', '.'), 1));

ALTER TABLE dbo.NashvilleHousing
ADD PropertyCity varchar(255);

UPDATE dbo.NashvilleHousing
SET PropertyCity = REVERSE(PARSENAME(REPLACE(REVERSE(TRIM(PropertyAddress)), ',', '.'), 2));

ALTER TABLE dbo.NashvilleHousing
ADD OwnerStreet varchar(200);

UPDATE dbo.NashvilleHousing
SET OwnerStreet = REVERSE(PARSENAME(REPLACE(REVERSE(TRIM(OwnerAddress)), ',', '.'), 1));

ALTER TABLE dbo.NashvilleHousing
ADD OwnerCity varchar(200);

UPDATE dbo.NashvilleHousing
SET OwnerCity = REVERSE(PARSENAME(REPLACE(REVERSE(TRIM(OwnerAddress)), ',', '.'), 2));

ALTER TABLE dbo.NashvilleHousing
ADD OwnerState varchar(100);

UPDATE dbo.NashvilleHousing
SET OwnerState = REVERSE(PARSENAME(REPLACE(REVERSE(TRIM(OwnerAddress)), ',', '.'), 3));

--4. Change Y and N to Yes and No in "Sold as Vacant" field
UPDATE dbo.NashvilleHousing
SET SoldAsVacant = CASE
		WHEN SoldAsVacant = 'N' THEN 'No'
		WHEN SoldAsVacant = 'Y' THEN 'Yes'
		ELSE SoldAsVacant
		END;

/* SELECT COUNT(SoldAsVacant)
FROM dbo.NashvilleHousing
WHERE SoldAsVacant = 'N'; --Verify that all 'Y' and 'N' strings have been changed */

--5. Remove duplicates (delete from table)
WITH CTE_NashvilleHousing AS
(SELECT *, ROW_NUMBER() OVER (
	PARTITION BY ParcelID, PropertyAddress, SaleDate, SalePrice, LegalReference 
	ORDER BY UniqueID) AS row_num
	FROM dbo.NashvilleHousing
)
DELETE FROM CTE_NashvilleHousing WHERE row_num > 1 --104 rows affected
SELECT *
FROM dbo.NashvilleHousing; --total num of rows is now 56373

/* SELECT *
FROM CTE_NashvilleHousing
WHERE row_num > 1; --104 rows are duplicates */

--6. Delete Unused Columns
--Should NOT do this to RAW DATA.
ALTER TABLE dbo.NashvilleHousing
DROP COLUMN PropertyAddress, OwnerAddress, SaleDate;

SELECT *
FROM dbo.NashvilleHousing;
